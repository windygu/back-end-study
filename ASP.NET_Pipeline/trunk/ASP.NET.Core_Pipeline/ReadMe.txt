ASP.NET Core 中间件

中间件是一种装配到应用管道以处理请求和响应的软件。 
每个组件：
1、选择是否将请求传递到管道中的下一个组件。
2、可在管道中的下一个组件前后执行工作。

请求委托用于生成请求管道。 请求委托处理每个 HTTP 请求。
使用 RunMap 和 Use 扩展方法来配置请求委托。 
可将一个单独的请求委托指定为并行匿名方法（称为并行中间件），或在可重用的类中对其进行定义。 
这些可重用的类和并行匿名方法即为中间件，也叫中间件组件。 
请求管道中的每个中间件组件负责调用管道中的下一个组件，或使管道短路。

		
			|----------------|		|----------------|		|----------------|
request	=>	|	Middleware1	 |		|	Middleware2	 |		|	Middleware3	 |
			|	// logic	 |		|				 |		|				 |
			|		next()	 | =>	|	// logic	 |		|				 |
			|				 |		|		next()	 | =>	|	// logic	 |
			|				 |		|				 |		|		next()	 |
			|				 |		|				 |		|				 |
response <=	|  // more logic | <=	| // more logic	 | <=	| // more logic	 |
			|				 |		|				 |		|				 |
			|				 |		|				 |		|				 |
			|----------------|		|----------------|		|----------------|

每个委托均可在下一个委托前后执行操作。 
此外，委托还可以决定不将请求传递给下一个委托，这就是对请求管道进行短路。
通常需要短路，因为这样可以避免不必要的工作。 
例如，静态文件中间件可以返回静态文件请求并使管道的其余部分短路。
先在管道中调用异常处理委托，以便它们可以捕获在管道的后期阶段所发生的异常。

中间组件：https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/middleware/?view=aspnetcore-2.2
以下 Startup.Configure 方法将为常见应用方案添加中间件组件：
异常/错误处理
HTTP 严格传输安全协议
HTTPS 重定向
静态文件服务器
Cookie 策略实施
身份验证
会话
MVC